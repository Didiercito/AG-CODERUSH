id,nombre,descripcion,tipo,nivel_dificultad,puntos_base,multiplicador_dificultad,bonus_tiempo,habilidades_requeridas,tiempo_limite,memoria_limite,fuente,año_competencia,tasa_resolucion_historica,problemas_prerequisito,problemas_relacionados,lenguajes_recomendados,penalizacion_tiempo
11,Subsecuencia Común Más Larga,Encontrar LCS entre dos cadenas usando programación dinámica y optimización de memoria,optimizacion,medio,300,1.8,60,programacion_dinamica:0.9;strings:0.6,75,256,ICPC Regional,2023,0.45,5,12;15,C++;Python;Java,20
12,Detección de ciclos DFS,Implementar búsqueda en profundidad para detectar ciclos en grafos dirigidos,busqueda,medio,280,1.7,55,grafos:0.9;estructuras_datos:0.7,90,256,Codeforces Div2,2023,0.52,6,13;16,C++;Java;Python,18
13,Camino más corto Dijkstra,Encontrar rutas óptimas usando algoritmo de Dijkstra con heap de prioridad,optimizacion,medio,350,1.9,70,grafos:0.95;estructuras_datos:0.8,120,512,AtCoder Regular,2022,0.38,12,14;17,C++;Java,25
14,Knapsack 0/1,Resolver problema de optimización de mochila usando programación dinámica,optimizacion,medio,320,1.8,65,programacion_dinamica:0.9;matematicas:0.5,100,256,SPOJ Classical,2023,0.42,11,18;19,C++;Python;Java,22
15,Z-Algorithm,Implementar algoritmo Z para búsqueda eficiente de patrones en cadenas,busqueda,medio,290,1.7,50,strings:0.95;algoritmos_basicos:0.6,85,128,String Algorithms,2023,0.48,5,20;21,C++;Python,17
16,Componentes conexas,Encontrar componentes fuertemente conexas usando búsqueda y algoritmo de Tarjan,busqueda,dificil,380,2.1,75,grafos:0.95;estructuras_datos:0.9,150,512,ACM ICPC,2022,0.35,12;13,22;23,C++;Java,30
17,Árbol de segmentos,Implementar estructura optimizada para consultas de rango con actualización logarítmica,optimizacion,medio,340,1.9,60,estructuras_datos:0.9;matematicas:0.6,110,256,Competitive Programming,2023,0.40,6,24;25,C++;Java,20
18,Programación dinámica en árboles,Resolver optimización en estructuras arbóreas usando DP bottom-up,optimizacion,medio,360,2.0,70,programacion_dinamica:0.9;grafos:0.7,130,256,Tree DP Problems,2023,0.36,14,26;27,C++;Python,25
19,Máximo flujo,Implementar optimización de flujo en redes usando Ford-Fulkerson,optimizacion,dificil,400,2.2,80,grafos:0.95;matematicas:0.7,180,512,Network Flow,2022,0.32,16,28;29,C++;Java,35
20,Hashing polinomial,Implementar función hash matemática para comparación eficiente de cadenas,matematica,medio,310,1.8,55,strings:0.9;matematicas:0.8,95,128,Hashing Techniques,2023,0.44,15,30;31,C++;Python,18